@model LibrarySystem.Generic.HomeViewModel
@{
	ViewData["Title"] = "Home";
}

<!-- Hero Section -->	
<section class="hero-section d-flex align-items-center">
	<div class="hero-text-container">
		<h1 class="display-3">Discover Your Next Favorite Book</h1>
		<p class="lead">Explore featured books and authors in our library collection.</p>
		<a href="#about" class="btn btn-primary btn-lg mt-3">Explore Now</a>
	</div>
	<div class="hero-image-container">
		<img src="/images/hero-library.jpg" alt="Library Image" class="hero-image" />
	</div>
</section>

<!-- About Section -->
<section id="about" class="content-section-secondary bg-primary text-center py-5 my-5">
	<div class="container my-5">
		<h2 class="mb-4">About Our Library</h2>
		<p class="lead">We provide access to a wide collection of books from various genres and authors. Our mission is to foster a love for reading and lifelong learning.</p>
	</div>
</section>

<!-- Featured Books Section -->
<section id="featured-books" class="content-section text-center py-5 overflow-hidden">
	<div class="container-fluid">
		<h2 class="mb-4 text-primary">Featured Books</h2>

		<div id="book-carousel" class="d-flex flex-nowrap overflow-hidden" style="white-space: nowrap;">
			@foreach (var book in Model.Books.Take(4))
			{
				<div class="book-card card shadow-sm mx-2 d-inline-block" style="width: 16rem; flex-shrink: 0;">
					@if (book.Image != null)
					{
						<img src="data:image/jpeg;base64,@Convert.ToBase64String(book.Image)"
							 class="card-img-top" alt="@book.Title"
							 style="width: 100%; height: 15rem; object-fit: cover;" />
					}
					else
					{
						<img src="/images/default-book-3.png"
							 class="card-img-top" alt="No Image"
							 style="width: 100%; height: 15rem; object-fit: cover;" />
					}
					<div class="card-body">
						<h5 class="card-title">@book.Title</h5>
						<p class="card-text text-muted truncate-3">@book.Description</p>
					</div>
				</div>
			}
		</div>
	</div>
</section>


<!-- Featured Authors Section -->
<section id="featured-authors" class="content-section bg-light text-center py-5">
	<div class="container-fluid">
		<h2 class="mb-4 text-primary">Featured Authors</h2>
		<div class="d-flex flex-wrap justify-content-between">
			@foreach (var author in Model.Authors.Take(4))
			{
				<div class="card m-3 shadow-sm" style="width: 13rem;">
					@if (author.Image != null)
					{
						<img src="data:image/jpeg;base64,@Convert.ToBase64String(author.Image)"
							 class="card-img-top" alt="@author.Name"
							 style="width: 100%; height: 15rem; object-fit: cover;" />
					}
					else
					{
						<img src="/images/default-author.jpg"
							 class="card-img-top" alt="No Image"
							 style="width: 100%; height: 15rem; object-fit: cover;" />
					}
					<div class="card-body">
						<h5 class="card-title">@author.Name</h5>
						<p class="card-text text-muted truncate-3">@author.Description</p>
					</div>
				</div>
			}
		</div>
	</div>
</section>

<style>
	.hero-section {
		height: 100vh;
		display: flex;
		position: relative;
		background: linear-gradient(to right, #ffffff 50%, transparent 50%);
	}

	.hero-text-container {
		position: absolute;
		top: 50%;
		left: 5%;
		transform: translateY(-50%);
		z-index: 2;
		max-width: 40%;
		background-color: rgba(255, 255, 255, 0.85);
		padding: 2rem;
		border-radius: 12px;
		box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
	}

	.hero-image-container {
		width: 60%;
		margin-left: auto;
		height: 100%;
		overflow: hidden;
	}

	.hero-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
		filter: brightness(0.9);
	}

	.content-section {
		transition: all 0.3s ease-in-out;
	}

	.content-section-secondary {
		transition: all 0.3s ease-in-out;
		background-color: var(--bs-secondary-background);
	}

	.truncate-3 {
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
		text-overflow: ellipsis;
	}

	.truncate-3 {
		display: -webkit-box;
		-webkit-line-clamp: 3;
		-webkit-box-orient: vertical;
		overflow: hidden;
		text-overflow: ellipsis;
	}
</style>

<script>
	document.addEventListener("DOMContentLoaded", () => {
		const carousel = document.getElementById("book-carousel");
		const cards = carousel.querySelectorAll('.book-card');

		// Clone cards for seamless loop
		cards.forEach(card => {
			const clone = card.cloneNode(true);
			carousel.appendChild(clone);
		});

		const cardWidth = cards[0].offsetWidth + 16; // 16px = margin (adjust if needed)
		let currentScroll = 0;

		function scrollStep() {
			currentScroll += cardWidth;

			// Reset if halfway through the carousel (original + cloned)
			if (currentScroll >= carousel.scrollWidth / 2) {
				carousel.scrollLeft = 0;
				currentScroll = cardWidth;
			}

			carousel.scrollTo({
				left: currentScroll,
				behavior: "smooth"
			});
		}

		let interval = setInterval(scrollStep, 2000); // every 2 seconds

		// Optional: pause on hover
		carousel.addEventListener("mouseenter", () => clearInterval(interval));
		carousel.addEventListener("mouseleave", () => {
			interval = setInterval(scrollStep, 2000);
		});
	});
</script>



